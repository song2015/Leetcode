Question:
Given a sorted integer array where the range of elements are [0, 99] inclusive, return its missing ranges.
For example, given [0, 1, 3, 50, 75], return [“2”, “4->49”, “51->74”, “76->99”]
Example Questions Candidate Might Ask:
Q: What if the given array is empty? A: return [“0->99”] 
Q: What if the given array contains all elements from the ranges?  A: Return an empty list




import java.util.ArrayList;
import java.util.List;

public class missingRange {

	public static void main(String[] args) {
		int[] testArray={1,2,3,8,9,10};
		
		System.out.println( missing(testArray,0,99) );

	}
	
	public static List<String> missing(int[] a,int start,int end)
	{
		List<String> ranges=new ArrayList<>();
		int prev=start-1;
		int curr=0;
		for(int i=0;i<=a.length;i++){	//make it <= to deal with when i=a.length
			if(i==a.length) {	//deal
				curr=end+1;
			}else{
				curr=a[i];
			}
			
			if(curr-prev>1){
				ranges.add(getRange(a,prev+1,curr-1));
			}
			prev=curr;	//after dealing with curr
		}
		
		return ranges;
	}
	
	public static String getRange(int[] b, int from, int to){
		return (from==to)?String.valueOf(from):from+"->"+to;	//String.valueOf() turn # into String
	}
}


