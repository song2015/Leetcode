/*Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.
*/

public class Solution {
    public String longestPalindrome(String s) {
         int start=0;
        int end=0;
        for(int i=0;i<s.length();i++){
           
            int len1=longthOfPalindrome(s,i,i);
            int len2=longthOfPalindrome(s,i,i+1);
            int len=Math.max(len1,len2); //1.Math.max 
            
            if(len>end-start){
                start=i-(len-1)/2;
                end=i+len/2;
            }
        }
        
        return s.substring(start,end+1);//2.substring
    }
    
    int longthOfPalindrome(String s, int low,int high){
        int l=s.length();
        
        while(low>=0 && high<l && s.charAt(low)==s.charAt(high) ){
            low--;
            high++;
        }
        
        return high-low-1;
    }
}
