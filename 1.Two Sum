Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [1, 2].




public class Solution {
    public int[] twoSum(int[] nums, int target) {
       int[] temp=null; 
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]+nums[j]==target) {
                    System.out.println("index1="+(i+1)+",index2="+(j+1));
                    int[] arr={i+1,j+1};
                    return arr;
                }
            }
        }
      return temp;  
    }
}

solution 2:
public class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer,Integer> pair=new HashMap<>();          //Integer
        for(int i=0;i<nums.length;i++){
            int x=nums[i];
            if(pair.containsKey(target-x)){         //.containsKey()
                return new int[]{i,pair.get(target-x)};         //new int[]{}
            }
            pair.put(x,i);
        }
        throw new IllegalArgumentException("There are no 2 numbers in nums can be added to be equal to target.");
        //IllegalArgumentExceptiion("")
    }
}
